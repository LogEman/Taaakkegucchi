/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app/client.ts":
/*!***********************!*\
  !*** ./app/client.ts ***!
  \***********************/
/***/ (() => {

eval("function requireElementById(id) {\n    const element = document.getElementById(id);\n    if (!element) {\n        throw new Error(`Could not find element with id ${id}`);\n    }\n    return element;\n}\nfunction getButton(id) {\n    return requireElementById(id);\n}\nfunction getDiv(id) {\n    return requireElementById(id);\n}\nfunction getInput(id) {\n    return requireElementById(id);\n}\nconst bakaButton = getButton('baka');\nconst enterButton = getButton('enter');\nconst deleteButton = getButton('delete');\nconst submitButton = getButton('submit');\nconst cancelEditButton = getButton('cancelEdit');\nconst cancelNewButton = getButton('cancelNew');\nconst dateInput = getInput('dateInput');\nconst timeInput = getInput('timeInput');\nconst nameInput = getInput('nameInput');\nconst tasksListContainer = getInput('tasksList');\nconst newItemForm = getDiv('newItemForm');\nconst tasksList = getDiv('tasksList');\nconst editWindow = getDiv('editWindow');\nconst hungerBar = getDiv('hungerBar');\nconst pet = getDiv('pet');\nconst hungerMeter = getDiv('hungerMeter');\nconst loveMeter = getDiv('loveMeter');\nconst state = {\n    tasks: [],\n    taskIndex: 0,\n    editing: false,\n    pet: {\n        love: 0,\n        health: 4,\n        hunger: 1000,\n        size: 200,\n        alive: true,\n    }\n};\nconst fps = 50;\nconst sec = 1;\nconst min = sec * 60;\nconst hour = min * 60;\nconst day = hour * 24;\nconst petDef = {\n    maxHealth: 4,\n    minusLove: 10,\n    plusLove: 2,\n    maxHunger: 1000,\n    minLifeSpan: min,\n    feed: 100,\n    initialSize: 200,\n    maxSize: 600,\n    matureIn: min,\n    color: [\n        'red',\n        'yellow',\n        'green',\n        'blue',\n    ],\n};\nconst taskDef = {\n    submitCd: 10 * sec,\n    startEating: 3 * sec,\n    duration: 3 * sec,\n};\nfunction failTask() {\n    state.pet.love -= petDef.minusLove;\n}\nfunction deletePen1() {\n    state.pet.love -= 2;\n}\nfunction deletePen2() {\n    state.pet.love -= 10;\n}\nfunction succeedTask() {\n    state.pet.love += petDef.plusLove;\n}\nfunction feedPet() {\n    if (state.pet.hunger < petDef.maxHunger) {\n        state.pet.hunger += petDef.feed;\n    }\n}\nfunction setPetColor(color) {\n    pet.style.backgroundColor = color;\n}\nfunction getTimeStamp(strDateTime) {\n    const date = Date.parse(strDateTime);\n    return Math.floor(date / 1000);\n}\nfunction displayTasks() {\n    // TODO: Render a list of tasks to tasksListContainer based on \n    // the list of tasks in state.tasks.\n    let listHTML = '';\n    for (const task of state.tasks) {\n        listHTML += '<button class=\"taskButton\">' + task.name + ' ' + '|' + ' ' + task.date + ' ' + task.time + '</button>';\n    }\n    tasksListContainer.innerHTML = listHTML;\n}\nfunction addTask() {\n    newItemForm.style.display = 'none';\n    //console.log (dateInput.value)\n    //xsconsole.log (nameInput.value)\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = now.getMonth() + 1;\n    const date = now.getDate();\n    const newtask = {\n        name: nameInput.value || 'Unnamed',\n        date: dateInput.value || (year + '-' + month + '-' + date),\n        time: timeInput.value || '23:59',\n        canSubmitTime: (Date.now() / 1000) + taskDef.submitCd,\n        canSubmit: false,\n        startFeed: (Date.now() / 1000) + taskDef.startEating,\n        isFeeding: false,\n        endFeed: (Date.now() / 1000) + taskDef.startEating + taskDef.duration,\n        finishFeeding: false,\n    };\n    state.tasks.push(newtask);\n    displayTasks();\n}\nfunction newTask() {\n    newItemForm.style.display = 'block';\n    cancelNewButton.onclick = () => {\n        newItemForm.style.display = 'none';\n    };\n    enterButton.onclick = () => {\n        addTask();\n        //feedPet();\n    };\n}\nfunction editTask() {\n    if (state.taskIndex >= 0) {\n        editWindow.style.display = 'block';\n        deleteButton.onclick = () => {\n            if (state.tasks[state.taskIndex].isFeeding) {\n                deletePen1();\n            }\n            else if (state.tasks[state.taskIndex].finishFeeding) {\n                deletePen2();\n            }\n            state.tasks.splice(state.taskIndex, 1);\n            displayTasks();\n            editWindow.style.display = 'none';\n        };\n        submitButton.onclick = () => {\n            console.log(state.tasks[state.taskIndex].canSubmit);\n            if (state.tasks[state.taskIndex].canSubmit) {\n                state.tasks.splice(state.taskIndex, 1);\n                displayTasks();\n                succeedTask();\n                editWindow.style.display = 'none';\n            }\n        };\n        cancelEditButton.onclick = () => {\n            editWindow.style.display = 'none';\n        };\n    }\n}\nfunction checkTasks() {\n    for (let i = 0; i < state.tasks.length; i++) {\n        const due = getTimeStamp(state.tasks[i].date + ' ' + state.tasks[i].time);\n        const now = Math.floor(Date.now() / 1000);\n        if (due < now) {\n            state.tasks.splice(i, 1);\n            displayTasks();\n            failTask();\n        }\n        if (now > state.tasks[i].canSubmitTime) {\n            state.tasks[i].canSubmit = true;\n        }\n        if (state.tasks[i].isFeeding) {\n            state.pet.hunger += petDef.feed / (taskDef.duration * fps);\n        }\n        if (now > state.tasks[i].endFeed) {\n            state.tasks[i].isFeeding = false;\n            state.tasks[i].finishFeeding = true;\n        }\n        else if (now > state.tasks[i].startFeed) {\n            state.tasks[i].isFeeding = true;\n        }\n    }\n}\nfunction updatePetStatus() {\n    pet.style.height = state.pet.size + 'px';\n    pet.style.width = state.pet.size + 'px';\n    pet.style.marginTop = -state.pet.size / 2 + 'px';\n    hungerMeter.innerHTML = 'fullness:' + ' ' + (state.pet.hunger * 100 / petDef.maxHunger).toFixed(0) + '%';\n    loveMeter.innerHTML = 'love:' + ' ' + state.pet.love;\n    //hungerBar.style.width = state.pet.hunger * 100 / petDef.maxHunger + '%'\n}\nfunction petAction() {\n    updatePetStatus();\n    if (!state.pet.alive) {\n        setPetColor('black');\n    }\n    else {\n        state.pet.hunger -= petDef.maxHunger / (petDef.minLifeSpan * fps);\n        if (state.pet.hunger <= 0) {\n            state.pet.alive = false;\n        }\n        state.pet.health = Math.floor(state.pet.hunger / (petDef.maxHunger / petDef.maxHealth));\n        setPetColor(petDef.color[state.pet.health]);\n        if (state.pet.size < petDef.maxSize) {\n            state.pet.size += (petDef.maxSize - petDef.initialSize) / (petDef.matureIn * fps);\n        }\n    }\n}\nbakaButton.onclick = () => {\n    newTask();\n};\ntasksList.onclick = (event) => {\n    console.log(event.target);\n    //console.log ([...tasksList.children].indexOf(event.target as Element))\n    state.taskIndex = [...tasksList.children].indexOf(event.target);\n    console.log(state.taskIndex);\n    editTask();\n};\nfunction update() {\n    checkTasks();\n    petAction();\n}\nsetInterval(update, 1000 / fps);\n\n\n//# sourceURL=webpack://alttp/./app/client.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./app/client.ts"]();
/******/ 	
/******/ })()
;