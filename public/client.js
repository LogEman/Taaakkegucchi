/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app/client.ts":
/*!***********************!*\
  !*** ./app/client.ts ***!
  \***********************/
/***/ (() => {

eval("function requireElementById(id) {\n    const element = document.getElementById(id);\n    if (!element) {\n        throw new Error(`Could not find element with id ${id}`);\n    }\n    return element;\n}\nfunction getButton(id) {\n    return requireElementById(id);\n}\nfunction getDiv(id) {\n    return requireElementById(id);\n}\nfunction getInput(id) {\n    return requireElementById(id);\n}\nconst bakaButton = getButton('baka');\nconst enterButton = getButton('enter');\nconst deleteButton = getButton('delete');\nconst submitButton = getButton('submit');\nconst cancelEditButton = getButton('cancelEdit');\nconst cancelNewButton = getButton('cancelNew');\nconst dateInput = getInput('dateInput');\nconst timeInput = getInput('timeInput');\nconst nameInput = getInput('nameInput');\nconst tasksListContainer = getInput('tasksList');\nconst newItemForm = getDiv('newItemForm');\nconst tasksList = getDiv('tasksList');\nconst editWindow = getDiv('editWindow');\nconst hungerBar = getDiv('hungerBar');\nconst pet = getDiv('pet');\nconst state = {\n    tasks: [],\n    taskIndex: 0,\n    time: 0,\n    pet: {\n        maxHealth: 4,\n        love: 0,\n        minusLove: 10,\n        plusLove: 2,\n        health: 4,\n        maxHunger: 1000,\n        hunger: 1000,\n        hungerRate: 0.2,\n        feed: 100,\n        maxSize: 600,\n        size: 200,\n        growSpeed: 0.2,\n        color: [\n            'red',\n            'yellow',\n            'green',\n            'blue',\n        ],\n        alive: true,\n    }\n};\nfunction displayTasks() {\n    // TODO: Render a list of tasks to tasksListContainer based on \n    // the list of tasks in state.tasks.\n    let listHTML = '';\n    for (const task of state.tasks) {\n        listHTML += '<button class=\"taskButton\">' + task.name + ' ' + '|' + ' ' + task.date + ' ' + task.time + '</button>';\n    }\n    tasksListContainer.innerHTML = listHTML;\n}\nfunction addTask() {\n    newItemForm.style.display = 'none';\n    //console.log (dateInput.value)\n    //xsconsole.log (nameInput.value)\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = now.getMonth() + 1;\n    const date = now.getDate();\n    const newtask = {\n        name: nameInput.value || 'Unnamed',\n        date: dateInput.value || (year + '-' + month + '-' + date),\n        time: timeInput.value || '23:59',\n    };\n    state.tasks.push(newtask);\n    displayTasks();\n}\nfunction editTask() {\n    if (state.taskIndex >= 0) {\n        editWindow.style.display = 'block';\n        deleteButton.onclick = () => {\n            //tasksList.removeChild(tasksList.children[state.taskIndex]);\n            // Remove selected task from the state.\n            state.tasks.splice(state.taskIndex, 1);\n            // Refresh the display\n            displayTasks();\n            //[...tasksList.children].splice(state.taskIndex, 1);\n            editWindow.style.display = 'none';\n        };\n        submitButton.onclick = () => {\n            editWindow.style.display = 'none';\n            state.tasks.splice(state.taskIndex, 1);\n            displayTasks();\n            if (state.pet.hunger < state.pet.maxHunger) {\n                state.pet.hunger += state.pet.feed;\n            }\n        };\n        cancelEditButton.onclick = () => {\n            editWindow.style.display = 'none';\n        };\n    }\n}\nfunction failTask() {\n    state.tasks.splice(state.taskIndex, 1);\n    state.pet.love -= state.pet.minusLove;\n}\nfunction setPetColor(color) {\n    pet.style.backgroundColor = color;\n}\nfunction getTimeStamp(strDateTime) {\n    const date = Date.parse(strDateTime);\n    return Math.floor(date / 1000);\n}\nfunction checkTasks() {\n    for (let i = 0; i < state.tasks.length; i++) {\n        const due = getTimeStamp(state.tasks[i].date + ' ' + state.tasks[i].time);\n        const now = Math.floor(Date.now() / 1000);\n        if (due < now) {\n            state.pet.alive = false;\n        }\n    }\n}\nbakaButton.onclick = () => {\n    newItemForm.style.display = 'block';\n};\ncancelNewButton.onclick = () => {\n    newItemForm.style.display = 'none';\n};\nenterButton.onclick = () => {\n    addTask();\n};\ntasksList.onclick = (event) => {\n    console.log(event.target);\n    //console.log ([...tasksList.children].indexOf(event.target as Element))\n    state.taskIndex = [...tasksList.children].indexOf(event.target);\n    console.log(state.taskIndex);\n    editTask();\n};\nfunction update() {\n    hungerBar.style.width = state.pet.hunger * 100 / state.pet.maxHunger + '%';\n    pet.style.height = state.pet.size + 'px';\n    pet.style.width = state.pet.size + 'px';\n    pet.style.marginTop = -state.pet.size / 2 + 'px';\n    state.time++;\n    checkTasks();\n    const sec = state.time / 50;\n    const min = sec / 60;\n    const hour = min / 60;\n    const day = hour / 24;\n    const p = state.pet;\n    if (p.alive === true) {\n        p.hunger -= p.hungerRate;\n        p.health = Math.floor(p.hunger / (p.maxHunger / p.maxHealth));\n        if (p.size < p.maxSize) {\n            p.size += p.growSpeed;\n        }\n        setPetColor(p.color[p.health]);\n    }\n    else {\n        setPetColor('black');\n    }\n    if (p.hunger === 0) {\n        p.alive = false;\n    }\n}\n/*function renderLoop(): void {\n    try {\n        window.requestAnimationFrame(renderLoop);\n        render(mainContext);\n    } catch (e) {\n        console.log(e);\n        debugger;\n    }\n}*/\n//renderLoop();\nsetInterval(update, 20);\n\n\n//# sourceURL=webpack://alttp/./app/client.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./app/client.ts"]();
/******/ 	
/******/ })()
;